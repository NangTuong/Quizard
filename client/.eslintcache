[{"/Users/lakelonbailey/bootcamp/Quizard/client/src/index.js":"1","/Users/lakelonbailey/bootcamp/Quizard/client/src/reportWebVitals.js":"2","/Users/lakelonbailey/bootcamp/Quizard/client/src/App.js":"3","/Users/lakelonbailey/bootcamp/Quizard/client/src/pages/Home.js":"4","/Users/lakelonbailey/bootcamp/Quizard/client/src/pages/Profile.js":"5","/Users/lakelonbailey/bootcamp/Quizard/client/src/pages/Login.js":"6","/Users/lakelonbailey/bootcamp/Quizard/client/src/pages/Signup.js":"7","/Users/lakelonbailey/bootcamp/Quizard/client/src/components/Header/index.js":"8","/Users/lakelonbailey/bootcamp/Quizard/client/src/utils/queries.js":"9","/Users/lakelonbailey/bootcamp/Quizard/client/src/utils/auth.js":"10","/Users/lakelonbailey/bootcamp/Quizard/client/src/utils/mutations.js":"11","/Users/lakelonbailey/bootcamp/Quizard/client/src/components/QuizForm.js/index.js":"12","/Users/lakelonbailey/bootcamp/Quizard/client/src/components/Nav/index.js":"13","/Users/lakelonbailey/bootcamp/Quizard/client/src/components/QuizList/index.js":"14","/Users/lakelonbailey/bootcamp/Quizard/client/src/pages/TakeQuiz.js":"15"},{"size":500,"mtime":1663286958636,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1663286958637,"results":"18","hashOfConfig":"17"},{"size":1861,"mtime":1663721527009,"results":"19","hashOfConfig":"17"},{"size":459,"mtime":1663720737746,"results":"20","hashOfConfig":"17"},{"size":1752,"mtime":1663811754675,"results":"21","hashOfConfig":"17"},{"size":2140,"mtime":1663718994624,"results":"22","hashOfConfig":"17"},{"size":2762,"mtime":1663718564684,"results":"23","hashOfConfig":"17"},{"size":273,"mtime":1663809570398,"results":"24","hashOfConfig":"17"},{"size":1671,"mtime":1663719397434,"results":"25","hashOfConfig":"17"},{"size":1492,"mtime":1663286958637,"results":"26","hashOfConfig":"17"},{"size":900,"mtime":1663647788766,"results":"27","hashOfConfig":"17"},{"size":7495,"mtime":1663811935244,"results":"28","hashOfConfig":"17"},{"size":765,"mtime":1663811157290,"results":"29","hashOfConfig":"17"},{"size":756,"mtime":1663811223035,"results":"30","hashOfConfig":"17"},{"size":5590,"mtime":1663806090287,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1fq7wpw",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},"/Users/lakelonbailey/bootcamp/Quizard/client/src/index.js",[],["64","65"],"/Users/lakelonbailey/bootcamp/Quizard/client/src/reportWebVitals.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/App.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/pages/Home.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/pages/Profile.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/pages/Login.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/pages/Signup.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/components/Header/index.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/utils/queries.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/utils/auth.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/utils/mutations.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/components/QuizForm.js/index.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/components/Nav/index.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/components/QuizList/index.js",[],"/Users/lakelonbailey/bootcamp/Quizard/client/src/pages/TakeQuiz.js",["66","67"],"import React, {useState, useEffect, useRef} from 'react';\nimport { QUERY_QUIZ } from '../utils/queries';\nimport { useQuery } from '@apollo/client';\nimport { useParams, useResolvedPath } from 'react-router-dom';\n\n\n\n\nconst TakeQuiz = (props) => {\n    const {id: quizId} = useParams();\n    const {loading, data} = useQuery(QUERY_QUIZ, {\n        variables: {\n            quizId: quizId\n        }\n    });\n    const timeRef = useRef(0);\n\n    const [timerState, setTimerState] = useState({hours: '00',  minutes: '00', seconds: '00'})\n    const [quizDone, setQuizDone] = useState(false)\n\n    const [answersState, setAnswersState] = useState({questions: [], score: '0/10'})\n    if (data) {\n        if (!answersState.questions.length) {\n            for (let question of data.quiz.questions) {\n                answersState.questions.push({\n                    ...question,\n                    correct: false,\n                    answer: -1\n                })\n            }\n            answersState.score = `0/${answersState.questions.length.toString()}`\n            setAnswersState(answersState)\n        }\n    }\n    useEffect(() => {\n        const setTimer = () => {\n            let temp_time = timeRef.current;\n            timerState.hours = parseInt(temp_time / 3600).toString().padStart(2, '0');\n            temp_time %= 3600;\n            timerState.minutes = parseInt(temp_time / 60).toString().padStart(2, '0');\n            temp_time %= 60;\n            timerState.seconds = temp_time.toString().padStart(2, '0');\n            setTimerState({...timerState});\n        };\n\n        if (data) {\n            timeRef.current = data.quiz.time_limit * 60;\n        }\n\n        var interval = setInterval(() => {\n            setTimer();\n            timeRef.current -= 1;\n            if (timeRef.current <= 0) {\n                clearInterval(interval);\n                finishQuiz();\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [data]);\n\n    const updateAnswers = (event) => {\n        if (event.target.checked) {\n            const question = parseInt(event.target.value.split('_')[0])\n            const choice = parseInt(event.target.value.split('_')[1])\n\n            answersState.questions[question].answer = choice;\n\n            if (choice === data.quiz.questions[question].correct_answer) {\n                answersState.questions[question].correct = true;\n            }\n            else {\n                answersState.questions[question].correct = false;\n            }\n            const total_correct = answersState.questions.filter((question) => {\n                return question.correct;\n            })\n            answersState.score = `${total_correct.length.toString()}/${answersState.questions.length}`;\n            setAnswersState(answersState)\n        }\n    }\n\n    const finishQuiz = () => {\n        setQuizDone(true);\n    }\n\n    if (loading) {\n        return (\n            <div>Loading...</div>\n        )\n    }\n    if (!quizDone) {\n        return (\n                <div>\n                    <p><strong>Timer:</strong></p>\n                    <p className='timer-box'>\n                        <span className='timer-item'>{timerState.hours}</span>\n                        <span className='timer-item'>{timerState.minutes}</span>\n                        <span className='timer-item'>{timerState.seconds}</span>\n                    </p>\n                    <div>\n                        <ul>\n                            {data.quiz && data.quiz.questions.map((question, q_index) => (\n                                <li  key={q_index}>\n                                    <p>{question.question}</p>\n                                    <div>\n                                        {question.choices.map((choice, c_index) => (\n                                            <div key={c_index}>\n                                                <label>\n                                                    <input onChange={updateAnswers} value={`${q_index}_${c_index}`} type='radio' name={`question_${q_index}_choice`}></input>\n                                                    <span>{choice}</span>\n                                                </label>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                    <button className='btn' onClick={finishQuiz}>Finish</button>\n                </div>\n        )\n    }\n    else {\n        return (\n            <div>\n                <h3>Your Score: {answersState.score}</h3>\n                <div>\n                    <ul>\n                        {answersState.questions.map((question, index) => (\n                            <div className='question-list-item'>\n                                <p>Question {index + 1}: {question.question}</p>\n                                <p>Result: <span>{question.correct ? 'CORRECT' : 'INCORRECT'}</span></p>\n                                {!question.correct && (\n                                    <p style={{marginLeft: '12px'}}><strong>Correct Answer:</strong> {question.choices[question.correct_answer]}</p>\n                                )}\n                                <p style={{marginLeft: '12px'}}><strong>Your Answer:</strong> {question.choices[question.answer]}</p>\n                            </div>\n                        ))}\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default TakeQuiz;",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":4,"column":21,"nodeType":"74","messageId":"75","endLine":4,"endColumn":36},{"ruleId":"76","severity":1,"message":"77","line":60,"column":8,"nodeType":"78","endLine":60,"endColumn":14,"suggestions":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'useResolvedPath' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'timerState'. Either include it or remove the dependency array. You can also do a functional update 'setTimerState(t => ...)' if you only need 'timerState' in the 'setTimerState' call.","ArrayExpression",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [data, timerState]",{"range":"85","text":"86"},[1949,1955],"[data, timerState]"]